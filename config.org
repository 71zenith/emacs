#+TITLE: minimal emacs
#+AUTHOR: zen
#+EMAIL: 71zenith@proton.me

* optimisation
#+begin_src elisp
  (setq gc-cons-threshold (* 50 1000 1000))

  (setq-default native-comp-async-report-warnings-errors nil)
  (add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory))
#+end_src

* package setup
#+begin_src elisp
  (require 'package)
  (setq-default package-archives '(("melpa" . "https://melpa.org/packages/")
                                   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (require 'use-package)
  (setq-default use-package-always-ensure t)
#+end_src

* clean dirs
#+begin_src elisp
  (setq-default user-emacs-directory (expand-file-name "~/.cache/emacs/")
                url-history-file (expand-file-name "url/history" user-emacs-directory))
#+end_src

* UI stuff
** disable elements
#+begin_src elisp
  (global-visual-line-mode)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (fringe-mode 0)
  (menu-bar-mode -1)

  (setq-default use-dialog-box nil
                visible-bell nil
                inhibit-startup-message t
                ring-bell-function 'ignore
                use-file-dialog nil
                make-backup-files nil
                auto-save-default nil
                warning-minimum-level :error)

  (defun display-startup-echo-area-message ()
    (message ""))
#+end_src

** font setup
#+begin_src elisp
  (set-face-attribute 'default nil :font "Cascadia Code" :height 150)
  (set-face-attribute 'fixed-pitch nil :font "Cascadia Code" :height 150)
  (set-face-attribute 'fixed-pitch-serif nil :font "Cascadia Mono" :height 150)
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height 150 :weight 'regular)
#+end_src

** theme setup
#+begin_src elisp
  (load-theme 'tango)
  (set-face-attribute 'mode-line nil :box '(:line-width 6 :color "#ede6e3")
                      :background "#ede6e3"
                      :underline "grey")
  (set-face-attribute 'mode-line-inactive nil :box '(:line-width 6 :color "#ede6e3")
                      :background "#ede6e3")
  (set-frame-parameter (selected-frame) 'internal-border-width 20)
  (set-background-color "#ede6e3")
  (set-face-attribute 'org-block nil :background "#f5dad8")
#+end_src

** modeline
#+begin_src elisp
  (defun mode-line-render (left-text right-text)
    (let* ((siding 10)
           (available (- (- (window-pixel-width)
                            (+ (string-pixel-width (format-mode-line left-text))
                               (string-pixel-width (format-mode-line right-text))))
                         (* 2 siding)))
           (mid-pad (propertize "-" 'display `(space :width (,available))))
           (side-pad (propertize "-" 'display `(space :width (,siding)))))
      (list side-pad left-text mid-pad right-text side-pad)))
  (setq-default mode-line-format
                '((:eval (mode-line-render
                          `(" %I  %l:%c  %p")
                          `((:eval (concat (propertize "%b  " 'face '(:slant italic)) "(%m) ")))))))
#+end_src

** indentation
#+begin_src elisp
  (setq-default tab-width 2
                evil-shift-width tab-width
                indent-tabs-mode nil)
#+end_src

* startup screen
#+begin_src elisp
  (use-package dashboard
    :ensure t
    :config
    (setq-default dashboard-startup-banner "~/.emacs.d/avatar.gif"
                  dashboard-item-names '(("Recent Files:" . "Recent:"))
                  dashboard-center-content t
                  dashboard-banner-logo-title "Is life real?"
                  dashboard-items '((recents  . 10))
                  dashboard-show-shortcuts nil
                  dashboard-footer-messages '("Wait, who am i?"))
    (dashboard-setup-startup-hook))
#+end_src

* vi mode
#+begin_src elisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package evil
    :ensure t
    :init
    (setq-default evil-want-keybinding nil
                  evil-undo-system nil)
    :config
    (evil-mode 1)
    (define-key evil-normal-state-map (kbd "C-r") 'undo-redo))

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))
#+end_src

* magit setup
#+begin_src elisp
  (use-package magit
    :ensure t
    :bind ("M-p" . magit-status))
#+end_src

* menu completion
#+begin_src elisp
  (fido-vertical-mode 1)
  (setq-default icomplete-compute-delay 0.02
                icomplete-max-delay-chars 2)
#+end_src

* dired setup
#+begin_src elisp
  (use-package dired
    :ensure nil
    :bind (("C-x j" . dired-jump))
    :custom ((dired-listing-switches "-ahGl --time-style=+ -D"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-up-directory
      "l" 'dired-find-file))
#+end_src

* revert garbage collection
#+begin_src elisp
  (setq-default gc-cons-threshold (* 2 1000 1000))
#+end_src
