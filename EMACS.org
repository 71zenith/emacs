#+TITLE: イーマックス コンフィッグ
#+AUTHOR: ゼン
#+EMAIL: 71zenith@proton.me

* early-init.el
#+begin_src  emacs-lisp :tangle "early-init.el"
(setq-default package-enable-at-startup nil
              use-dialog-box nil
              file-name-handler-alist nil
              inhibit-compacting-font-caches t
              warning-minimum-level :error
              use-package-always-ensure t)

(defvar native-comp-async-report-warnings-errors 'silent)
(defvar file-name-handler-alist-old file-name-handler-alist)
(defvar vc-handled-backends-old vc-handled-backends)

(setq file-name-handler-alist nil
      vc-handled-backends nil
      gc-cons-percentage 0.5
      highlight-nonselected-windows nil
      fast-but-imprecise-scrolling t
      idle-update-delay 1.0
      gc-cons-threshold most-positive-fixnum)

(add-hook 'after-init-hook
          `(lambda ()
             (setq file-name-handler-alist file-name-handler-alist-old)
             (setq vc-handled-backends vc-handled-backends-old)
             (setq gc-cons-threshold (* 2 1000 1000))
             (setq gc-cons-percentage 0.1)
             (set-frame-parameter nil 'alpha-background 90)
             (add-to-list 'default-frame-alist '(alpha-background . 90)))
          t)

(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs ready in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

(add-to-list 'default-frame-alist
             '(background-color . "#161616"))

(setq-default default-frame-alist
              '((tool-bar-lines . 0)
                (menu-bar-lines . 0)
                (undecorated . t)
                (vertical-scroll-bars . nil)
                (horizontal-scroll-bars . nil)))
#+end_src


* init.el
** elpaca
#+begin_src elisp :tangle "init.el"
(defvar elpaca-installer-version 0.6)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (call-process "git" nil buffer t "clone"
                                       (plist-get order :repo) repo)))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

(elpaca elpaca-use-package
  (elpaca-use-package-mode))

(elpaca-wait)
#+end_src

** completion
*** vertico
#+begin_src elisp :tangle "init.el"
(use-package vertico
  :bind (:map vertico-map
              ("C-h" . left-char)
              ("C-l" . right-char)
              ("C-j" . vertico-next)
              ("C-k" . vertico-previous))
  :config
  (setq vertico-resize nil
        vertico-cycle t)
  :init
  (vertico-mode t))
#+end_src

*** marginalia
#+begin_src elisp :tangle "init.el"
(use-package marginalia
  :config
  (setq marginalia-annotators
        '(marginalia-annotators-heavy marginalia-annotators-light nil))
  (marginalia-mode t))
#+end_src

*** corfu
#+begin_src elisp :tangle "init.el"
(use-package corfu
  :bind (:map corfu-map
              ("TAB"      . corfu-next)
              ([tab]      . corfu-next)
              ("S-TAB"    . corfu-previous)
              ([backtab]  . corfu-previous))
  :hook ((prog-mode   . corfu-mode)
         (shell-mode  . corfu-mode)
         (eshell-mode . corfu-mode))
  :config
  (setq corfu-cycle t
        corfu-auto t
        corfu-preview-current 'insert
        corfu-separator ?\s
        corfu-quit-at-boundary nil
        corfu-quit-no-match nil
        corfu-preselect 'prompt
        corfu-on-exact-match nil
        corfu-scroll-margin 5
        corfu-popupinfo-delay nil)
  (global-corfu-mode)
  (corfu-history-mode)
  (corfu-popupinfo-mode))
#+end_src

*** cape
#+begin_src elisp :tangle "init.el"
(use-package cape
  :config
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  (add-to-list 'completion-at-point-functions #'cape-elisp-block)
  (add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
  (add-to-list 'completion-at-point-functions #'cape-emoji))
#+end_src

*** orderless
#+begin_src elisp :tangle "init.el"
(use-package orderless
  :config
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** act on everything
*** consult
#+begin_src elisp :tangle "init.el"
(use-package consult
  :config
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)
  (global-set-key [remap switch-to-buffer] 'consult-buffer)
  (global-set-key [remap yank-pop] 'consult-yank-pop)
  (global-set-key [remap Info-search] 'consult-info)
  (global-set-key [remap bookmark-jump] 'consult-bookmark)
  (global-set-key [remap switch-to-buffer-other-tab] 'consult-buffer-other-tab)
  (global-set-key [remap recentf] 'consult-recent-file)
  (global-set-key [remap switch-to-buffer-other-frame] 'consult-buffer-other-frame)
  (global-set-key [remap switch-to-buffer-other-window] 'consult-buffer-other-window)
  (global-set-key [remap project-switch-to-buffer] 'consult-project-buffer)
  (global-set-key [remap isearch-forward] 'consult-line)
  (global-set-key [remap isearch-backward] 'consult-line)
  :after vertico)
#+end_src

*** embark
#+begin_src elisp :tangle "init.el"
(use-package embark
  :bind (("M-e" . embark-act))
  :config
  (defun embark-which-key-indicator ()
    "An embark indicator that displays keymaps using which-key.
The which-key help message will show the type and value of the
current target followed by an ellipsis if there are further
targets."
    (lambda (&optional keymap targets prefix)
      (if (null keymap)
          (which-key--hide-popup-ignore-command)
        (which-key--show-keymap
         (if (eq (plist-get (car targets) :type) 'embark-become)
             "Become"
           (format "Act on %s '%s'%s"
                   (plist-get (car targets) :type)
                   (embark--truncate-target (plist-get (car targets) :target))
                   (if (cdr targets) "…" "")))
         (if prefix
             (pcase (lookup-key keymap prefix 'accept-default)
               ((and (pred keymapp) km) km)
               (_ (key-binding prefix 'accept-default)))
           keymap)
         nil nil t (lambda (binding)
                     (not (string-suffix-p "-argument" (cdr binding))))))))

  (setq embark-indicators
        '(embark-which-key-indicator
          embark-highlight-indicator
          embark-isearch-highlight-indicator))

  (defun embark-hide-which-key-indicator (fn &rest args)
    "Hide the which-key indicator immediately when using the completing-read prompter."
    (which-key--hide-popup-ignore-command)
    (let ((embark-indicators
           (remq #'embark-which-key-indicator embark-indicators)))
      (apply fn args)))

  (advice-add #'embark-completing-read-prompter
              :around #'embark-hide-which-key-indicator))

(use-package embark-consult
  :after (:all embark consult)
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** spell
#+begin_src elisp :tangle "init.el"
(use-package jinx)
#+end_src

** diminish
#+begin_src elisp :tangle "init.el"
(use-package diminish)
#+end_src

** org
#+begin_src elisp :tangle "init.el"
(use-package org-modern
  :config
  (setq org-startup-indented t
        org-edit-src-content-indentation 0
        org-src-preserve-indentation t
        org-confirm-babel-evaluate nil
        org-auto-align-tags nil
        org-tags-column 0
        org-catch-invisible-edits 'show-and-error
        org-special-ctrl-a/e t
        org-insert-heading-respect-content t
        org-hide-emphasis-markers t
        org-pretty-entities t
        org-ellipsis "…")
  :diminish (org-indent-mode visual-line-mode)
  :hook ((org-mode . org-modern-mode)
         (org-mode . hl-line-mode)
         (org-mode . visual-line-mode)
         (org-mode . org-indent-mode)))
#+end_src

** eshell
#+begin_src elisp :tangle "init.el"
(setq eshell-highlight-prompt t
      eshell-hist-ignoredups t
      eshell-history-size nil)

(use-package eat
  :hook ((eshell-mode . eat-eshell-mode)
         (eshell-mode . eat-eshell-visual-command-mode)))

(use-package eshell-syntax-highlighting
  :hook
  (eshell-mode . eshell-syntax-highlighting-mode))
#+end_src

** popwin
#+begin_src elisp :tangle "init.el"
(use-package popwin
  :config
  (popwin-mode 1)
  (push '("*helpful*" :height 7) popwin:special-display-config)
  (push '("*tree-sit*" :height 7 :noselect t) popwin:special-display-config)
  (push '("*eshell-toggle*" :height 7) popwin:special-display-config))
#+end_src

** meow
#+begin_src elisp :tangle "init.el"
(use-package meow
  :config
  (defvar my-help-map
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "h") #'helpful-symbol)
      (define-key map (kbd "o") #'describe-symbol)
      (define-key map (kbd "k") #'describe-keymap)
      (define-key map (kbd "K") #'helpful-key)
      (define-key map (kbd "m") #'describe-mode)
      (define-key map (kbd "M") #'man)
      (define-key map (kbd "p") #'helpful-at-point)
      map))
  (defvar my-buffer-map
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "b") #'consult-buffer)
      (define-key map (kbd "k") #'kill-current-buffer)
      (define-key map (kbd "n") #'next-buffer)
      (define-key map (kbd "p") #'previous-buffer)
      (define-key map (kbd "s") #'scratch-buffer)
      map))
  (defvar my-window-map
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "s") #'split-window-below)
      (define-key map (kbd "v") #'split-window-right)
      (define-key map (kbd "c") #'delete-window)
      (define-key map (kbd "w") #'other-window)
      map))
  (defvar my-git-gutter-map
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "k") #'git-gutter:next-hunk)
      (define-key map (kbd "j") #'git-gutter:previous-hunk)
      (define-key map (kbd "r") #'git-gutter:revert-hunk)
      (define-key map (kbd "s") #'git-gutter:stage-hunk)
      (define-key map (kbd "p") #'git-gutter:popup-hunk)
      (define-key map (kbd "e") #'git-gutter:end-of-hunk)
      map))

  (defun meow-setup ()
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    (meow-motion-overwrite-define-key
     '("j" . meow-next)
     '("k" . meow-prev)
     '("<escape>" . ignore))
    (meow-leader-define-key
     '("SPC" . execute-extended-command)
     '("a" . embark-act)
	 `("b" . ,my-buffer-map)
     `("c" . ,my-git-gutter-map)
     '("d" . dired-jump)
     '("e" . embark-act)
     '("E" . eshell)
     '("f" . find-file)
     '("F" . consult-fd)
     '("g" . consult-ripgrep)
     `("h" . ,my-help-map)
     '("i" . insert-char)
     '("j" . consult-imenu)
     '("k" . comment-or-uncomment-region)
     (cons "l" popwin:keymap)
     '("m" . magit)
     '("n" . format-all-region-or-buffer)
     '("o" . indent-region)
     '("p" . consult-project-buffer)
     '("P" . project-switch-project)
     '("Q" . save-buffers-kill-emacs)
     '("r" . consult-recent-file)
     '("s" . save-buffer)
     '("t" . prism-randomize-colors)
     '("u" . consult-theme)
     '(":" . eval-expression)
     '("/" . consult-line)
     '("v" . consult-yank-pop)
     '("V" . eval-region) 
     `("w" . ,my-window-map)
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     '("\" . meow-keypad-describe-key)
   '("?" . meow-cheatsheet))
  (meow-normal-define-key
   '("C--" . text-scale-decrease)
   '("C-=" . text-scale-increase)
   '("C--" . text-scale-decrease)
   '("C-S-h" . (lambda () (interactive) (enlarge-window-horizontally 5)))
   '("C-S-l" . (lambda () (interactive) (shrink-window-horizontally 5)))
   '("C-S-k" . (lambda () (interactive) (enlarge-window 5)))
   '("C-S-j" . (lambda () (interactive) (shrink-window 5)))
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '(";" . meow-reverse)
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("[" . meow-beginning-of-thing)
   '("]" . meow-end-of-thing)
   '("a" . meow-append)
   '("A" . meow-open-below)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("c" . meow-change)
   '("d" . meow-delete)
   '("D" . meow-backward-delete)
   '("e" . meow-next-word)
   '("E" . meow-next-symbol)
   '("f" . meow-find)
   '("g" . meow-cancel-selection)
   '("G" . meow-grab)
   '("h" . meow-left)
   '("H" . meow-left-expand)
   '("i" . meow-insert)
   '("I" . meow-open-above)
   '("j" . meow-next)
   '("J" . meow-next-expand)
   '("k" . meow-prev)
   '("K" . meow-prev-expand)
   '("l" . meow-right)
   '("L" . meow-right-expand)
   '("m" . meow-join)
   '("n" . meow-search)
   '("o" . meow-block)
   '("O" . meow-to-block)
   '("p" . meow-yank)
   '("q" . meow-quit)
   '("Q" . meow-goto-line)
   '("r" . meow-replace)
   '("R" . meow-swap-grab)
   '("s" . meow-kill)
   '("t" . meow-till)
   '("u" . meow-undo)
   '("U" . meow-undo-in-selection)
   '("v" . meow-visit)
   '("w" . meow-mark-word)
   '("W" . meow-mark-symbol)
   '("x" . meow-line)
   '("X" . meow-goto-line)
   '("y" . meow-save)
   '("Y" . meow-sync-grab)
   '("z" . meow-pop-selection)
   '("'" . repeat)
   '("<escape>" . ignore)))
    (meow-setup)
    (setq meow-use-clipboard t)
    (setq meow-goto-line-function 'consult-goto-line)
    (setq meow-use-dynamic-face-color nil)
    (add-to-list 'meow-mode-state-list '(eshell-mode . insert))
    (meow-global-mode 1))
#+end_src
** code
*** snippets
#+begin_src elisp :tangle "init.el"
(use-package tempel
  :config
  (defun tempel-setup-capf ()
    (setq-local completion-at-point-functions
                (cons #'tempel-expand
                      completion-at-point-functions)))
  (add-hook 'org-mode-hook 'tempel-setup-capf))
(use-package tempel-collection)
#+end_src

*** tree sitter
#+begin_src elisp :tangle "init.el"
(use-package treesit-auto
  :config
  (setq treesit-auto-install 't)
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))
#+end_src

** quality of life
*** modeline
#+begin_src elisp :tangle "init.el"
(use-package spacious-padding
  :config
  (setq spacious-padding-widths
      '( :internal-border-width 10
         :header-line-width 2
         :mode-line-width 1
         :tab-width 2
         :right-divider-width 30
         :scroll-bar-width 2))
  (spacious-padding-mode t))

(use-package keycast
  :config
  (setq keycast-mode-line-format "%2s%k%c%R ")
  (setq keycast-mode-line-remove-tail-elements nil)
  (setq keycast-mode-line-insert-after 'mode-line-end-spaces)
  (dolist (input '(self-insert-command org-self-insert-command))
    (add-to-list 'keycast-substitute-alist `(,input "." "Typing…")))

  (dolist (event '(mouse-event-p mouse-movement-p mwheel-scroll))
    (add-to-list 'keycast-substitute-alist `(,event nil)))
  (keycast-mode-line-mode))
#+end_src

*** git
#+begin_src elisp :tangle "init.el"
(use-package magit)

(use-package git-gutter
  :diminish (git-gutter-mode)
  :config (global-git-gutter-mode t)
  (custom-set-variables
   '(git-gutter:modified-sign "● ")
   '(git-gutter:added-sign "▶ ")
   '(git-gutter:deleted-sign "▼ ")))
#+end_src

*** random
#+begin_src elisp :tangle "init.el"
(use-package pulsar
  :config
  (pulsar-global-mode t))

(use-package goggles
  :config
  (setq goggles-pulse t)
  (goggles-mode t))

(use-package seq)

(use-package eldoc
  :diminish (eldoc-mode))

(use-package eldoc-box
  :diminish (eldoc-box-hover-at-point-mode)
  :after eldoc  
  :hook (prog-mode . eldoc-box-hover-at-point-mode))

(use-package helpful)

(use-package prism
  :hook ((org-mode prog-mode) . prism-mode))

(use-package which-key
  :diminish (which-key-mode)
  :config
  (setq which-key-idle-delay 0.2
        which-key-idle-secondary-delay 0.02)
  (setq which-key-prefix-prefix "◉")
  (which-key-setup-minibuffer)
  (which-key-mode))
#+end_Src


** emacs
#+begin_src elisp :tangle "init.el"
(use-package emacs
  :ensure nil
  :config
  (setq ring-bell-function #'ignore
        completion-cycle-threshold 3
        scroll-step 1
        scroll-margin 3
        find-file-visit-truename t
        scroll-conservatively 10000
        make-backup-files nil
        next-screen-context-lines 5
        tab-always-indent 'complete
        comment-multi-line nil
        vc-follow-symlinks t
        line-move-visual nil
        initial-scratch-message nil
        indicate-empty-lines t
        vc-make-backup-files nil
        confirm-kill-emacs nil
        show-trailing-whitespace t
        use-short-answers t
        initial-major-mode 'org-mode
        inhibit-startup-screen t
        display-time-format "%H:%M"
        display-time-default-load-average nil
        default-input-method "japanese"
        enable-recursive-minibuffers t
        tab-width 2
        completion-in-region-function #'consult-completion-in-region
        electric-pair-pairs
        '(
          (?\" . ?\")
          (?\{ . ?\})))
  
  (set-face-attribute 'default nil :height 190)
  
  (define-fringe-bitmap 'right-curly-arrow
    [#b00000000
     #b00000000
     #b00000000
     #b00000000
     #b01110000
     #b00010000
     #b00010000
     #b00000000])
  (define-fringe-bitmap 'left-curly-arrow
    [#b00000000
     #b00001000
     #b00001000
     #b00001110
     #b00000000
     #b00000000
     #b00000000
     #b00000000])
  
  (setq create-lockfiles nil
	make-backup-files nil
	version-control t
	backup-by-copying t
	delete-old-versions t
	kept-old-versions 5
	kept-new-versions 5
	backup-directory-alist (list (cons "." (concat user-emacs-directory "backup/"))))

  (add-hook 'prog-mode-hook #'hl-line-mode)
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
  (electric-pair-mode t)
  (recentf-mode t)
  (save-place-mode t)
  (indent-tabs-mode nil)
  (display-time-mode t)
  (prettify-symbols-mode t)
  (global-auto-revert-mode t)
  (savehist-mode t)

  (defadvice split-window (after split-window-after activate)
    (other-window 1))
  
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode))
#+end_src

* eshell/alias
#+begin_src text :tangle "eshell/alias"
alias c clear-scrollback
alias clear clear-scrollback
alias cat bat -p -P
alias cp cp -ivr
alias d sudo
alias del sudo nix-collect-garbage --delete-old 
alias df duf
alias du dust
alias f free -h
alias g git
alias ko pkill
alias l ls -alh
alias la eza -a
alias ll eza -l
alias lla eza -la
alias ls eza --icons --git
alias lt eza --tree
alias mkdir mkdir -pv
alias mv mv -iv
alias rm rm -Ivr
alias up sudo nixos-rebuild switch --flake ~/nix#default
#+end_src
