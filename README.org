#+TITLE: イーマックス コンフィグ
#+AUTHOR: ゼン
#+EMAIL: 71zenith@proton.me

[[file:screenshot2.png]]

* early-init.el
#+begin_src  emacs-lisp :tangle "early-init.el"
;;; early-init.el -*- lexical-binding: t; -*-
(setq-default package-enable-at-startup nil
              use-dialog-box nil
              file-name-handler-alist nil
              frame-inhibit-implied-resize t
              load-prefer-newer t
              inhibit-compacting-font-caches t
              warning-minimum-level :error
              use-package-always-ensure t)

(defvar native-comp-async-report-warnings-errors 'silent)
(defvar file-name-handler-alist-old file-name-handler-alist)
(defvar vc-handled-backends-old vc-handled-backends)

(setq file-name-handler-alist nil
      vc-handled-backends nil
      gc-cons-percentage 0.5
      highlight-nonselected-windows nil
      fast-but-imprecise-scrolling t
      idle-update-delay 1.0
      gc-cons-threshold most-positive-fixnum)

(add-hook 'after-init-hook
          `(lambda ()
             (setq file-name-handler-alist file-name-handler-alist-old)
             (setq vc-handled-backends vc-handled-backends-old)
             (setq gc-cons-threshold (* 8 100000 100000))
             (setq gc-cons-percentage 0.1)
             (set-frame-parameter nil 'alpha-background 85)
             (add-to-list 'default-frame-alist '(alpha-background . 85)))
          t)

(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs ready in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

(add-to-list 'default-frame-alist '(background-color . "#161616"))

(setq-default default-frame-alist
              '((tool-bar-lines . 0)
                (menu-bar-lines . 0)
                (undecorated . t)
                (vertical-scroll-bars . nil)
                (horizontal-scroll-bars . nil)))
#+end_src


* init.el
** elpaca
#+begin_src elisp :tangle "init.el"
;;; init.el -*- lexical-binding: t; -*-
(defvar elpaca-installer-version 0.7)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                 ,@(when-let ((depth (plist-get order :depth)))
                                                     (list (format "--depth=%d" depth) "--no-single-branch"))
                                                 ,(plist-get order :repo) ,repo))))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

(elpaca elpaca-use-package
  (elpaca-use-package-mode))

(elpaca-wait)
#+end_src

** vertico
#+begin_src elisp :tangle "init.el"
(use-package vertico
  :bind (:map vertico-map
              ("C-h" . left-char)
              ("C-l" . right-char)
              ("C-j" . vertico-next)
              ("C-k" . vertico-previous))
  :config
  (setq vertico-resize nil
        vertico-cycle t)
  :init
  (vertico-mode t))
#+end_src

** marginalia
#+begin_src elisp :tangle "init.el"
(use-package marginalia
  :config
  (setq marginalia-annotators
        '(marginalia-annotators-heavy marginalia-annotators-light nil))
  (marginalia-mode t))
#+end_src

*** corfu
#+begin_src elisp :tangle "init.el"
(use-package corfu
  :bind (:map corfu-map
              ("TAB"      . corfu-next)
              ([tab]      . corfu-next)
              ("S-TAB"    . corfu-previous)
              ([backtab]  . corfu-previous))
  :hook ((prog-mode   . corfu-mode)
         (shell-mode  . corfu-mode)
         (eshell-mode . corfu-mode))
  :config
  (setq corfu-cycle t
        corfu-auto t
        corfu-preview-current 'insert
        corfu-separator ?\s
        corfu-quit-at-boundary nil
        corfu-quit-no-match nil
        corfu-preselect 'prompt
        corfu-on-exact-match nil
        corfu-scroll-margin 5
        corfu-popupinfo-delay nil)
  (global-corfu-mode)
  (corfu-history-mode)
  (corfu-popupinfo-mode))
#+end_src

*** cape
#+begin_src elisp :tangle "init.el"
(use-package cape
  :config
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  (add-to-list 'completion-at-point-functions #'cape-dict)
  (add-to-list 'completion-at-point-functions #'cape-elisp-block)
  (add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  (add-to-list 'completion-at-point-functions #'cape-emoji))
#+end_src

** orderless
#+begin_src elisp :tangle "init.el"
(use-package orderless
  :config
  (setq completion-ignore-case t)
  (setq read-buffer-completion-ignore-case t)
  (setq echo-keystrokes 0.25)
  (setq kill-ring-max 60)
  (setq read-file-name-completion-ignore-case t)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** consult
#+begin_src elisp :tangle "init.el"
(use-package consult
  :defer t
  :config
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)
  (global-set-key [remap switch-to-buffer] 'consult-buffer)
  (global-set-key [remap yank-pop] 'consult-yank-pop)
  (global-set-key [remap Info-search] 'consult-info)
  (global-set-key [remap bookmark-jump] 'consult-bookmark)
  (global-set-key [remap switch-to-buffer-other-tab] 'consult-buffer-other-tab)
  (global-set-key [remap recentf] 'consult-recent-file)
  (global-set-key [remap switch-to-buffer-other-frame] 'consult-buffer-other-frame)
  (global-set-key [remap switch-to-buffer-other-window] 'consult-buffer-other-window)
  (global-set-key [remap project-switch-to-buffer] 'consult-project-buffer)
  (global-set-key [remap isearch-forward] 'consult-line)
  (global-set-key [remap isearch-backward] 'consult-line)
  :after vertico)
#+end_src

** embark
#+begin_src elisp :tangle "init.el"
(use-package embark
  :defer t
  :config
  (defun embark-which-key-indicator ()
    "An embark indicator that displays keymaps using which-key.
The which-key help message will show the type and value of the
current target followed by an ellipsis if there are further
targets."
    (lambda (&optional keymap targets prefix)
      (if (null keymap)
          (which-key--hide-popup-ignore-command)
        (which-key--show-keymap
         (if (eq (plist-get (car targets) :type) 'embark-become)
             "Become"
           (format "Act on %s '%s'%s"
                   (plist-get (car targets) :type)
                   (embark--truncate-target (plist-get (car targets) :target))
                   (if (cdr targets) "…" "")))
         (if prefix
             (pcase (lookup-key keymap prefix 'accept-default)
               ((and (pred keymapp) km) km)
               (_ (key-binding prefix 'accept-default)))
           keymap)
         nil nil t (lambda (binding)
                     (not (string-suffix-p "-argument" (cdr binding))))))))

  (setq embark-indicators
        '(embark-which-key-indicator
          embark-highlight-indicator
          embark-isearch-highlight-indicator))

  (defun embark-hide-which-key-indicator (fn &rest args)
    "Hide the which-key indicator immediately when using the completing-read prompter."
    (which-key--hide-popup-ignore-command)
    (let ((embark-indicators
           (remq #'embark-which-key-indicator embark-indicators)))
      (apply fn args)))

  (advice-add #'embark-completing-read-prompter
              :around #'embark-hide-which-key-indicator))

(use-package embark-consult
  :after (:all embark consult)
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** diminish
#+begin_src elisp :tangle "init.el"
(use-package diminish)
#+end_src

** uniquify
#+begin_src elisp :tangle "init.el"
(use-package uniquify
  :ensure nil
  :config
  (setq uniquify-buffer-name-style 'forward
        uniquify-separator "/"
        uniquify-after-kill-buffer-p t
        uniquify-ignore-buffers-re "^\\*"))
#+end_src

** org
#+begin_src elisp :tangle "init.el"
(use-package org
  :ensure nil
  :config
  (setq org-startup-indented t
        org-edit-src-content-indentation 0
        org-src-preserve-indentation t
        org-confirm-babel-evaluate nil
        org-auto-align-tags nil
        org-tags-column 0
        org-catch-invisible-edits 'show-and-error
        org-special-ctrl-a/e t
        org-insert-heading-respect-content t
        org-hide-emphasis-markers t
        org-pretty-entities t
        org-ellipsis "…")
  :diminish (org-indent-mode visual-line-mode)
  :hook ((org-mode . hl-line-mode)
         (org-mode . visual-line-mode)
         (org-mode . org-indent-mode)))
#+end_src

** eshell
#+begin_src elisp :tangle "init.el"
(setq eshell-highlight-prompt t
      eshell-hist-ignoredups t
      eshell-history-size nil
      eshell-banner-message ""
      eshell-prompt-regexp "^[^λ]+ λ ")

(setq eshell-prompt-function (lambda nil
                               (concat
                                (propertize (abbreviate-file-name (eshell/pwd)) 'face `(:foreground "#82cfff") )
                                (propertize " λ" 'face `(:foreground "#ee5396"))
                                (propertize " "))))

(use-package eat
  :defer t
  :hook ((eshell-mode . eat-eshell-mode)
         (eshell-mode . eat-eshell-visual-command-mode))
  :bind (:map eshell-mode-map
              ("C-j" . eshell-previous-matching-input-from-input)
              ("C-k" . eshell-next-matching-input-from-input)))

(use-package capf-autosuggest
  :defer t
  :hook ((eshell-mode . capf-autosuggest-mode)))

(use-package eshell-toggle
  :defer t
  :config
  (setq eshell-toggle-window-side 'above
        eshell-toggle-size-fraction 2))

(use-package eshell-syntax-highlighting
  :hook
  (eshell-mode . eshell-syntax-highlighting-mode))
#+end_src

** evil
#+begin_Src elisp :tangle "init.el"
(use-package evil
  :init
  (setq evil-want-keybinding nil
        evil-want-C-u-scroll t
        evil-vsplit-window-right t
        evil-split-window-below t
        evil-undo-system 'undo-fu
        evil-want-integration t)
  (evil-mode t))

(use-package evil-collection
  :after evil
  :config (evil-collection-init))

(use-package evil-goggles
  :after evil
  :config
  (setq evil-goggles-duration 0.10)
  (evil-goggles-mode))

(use-package evil-snipe
  :after evil
  :config
  (setq evil-snipe-scope 'whole-buffer
        evil-snipe-repeat-scope 'whole-buffer)
  (evil-snipe-mode t)
  (evil-snipe-override-mode t))

(use-package evil-commentary
  :after evil
  :config
  (evil-commentary-mode))
#+end_src

** popwin
#+begin_src elisp :tangle "init.el"
(use-package popwin
  :config
  (popwin-mode 1)
  (push '("*helpful*" :height 7) popwin:special-display-config)
  (push '("*Help*" :height 7) popwin:special-display-config)
  (push '("*Occur*" :height 7) popwin:special-display-config)
  (push '("*tree-sit*" :height 7 :noselect t) popwin:special-display-config)
  (push '("*eldoc*" :height 7) popwin:special-display-config)
  (push '("*compilation*" :height 7) popwin:special-display-config))
#+end_src

** yasnippet
#+begin_src elisp :tangle "init.el"
(use-package yasnippet-snippets)
(use-package yasnippet
  :diminish (yas-minor-mode)
  :hook ((prog-mode org-mode) . yas-minor-mode))
#+end_src

** visual-replace
#+begin_src elisp :tangle "init.el"
(use-package visual-replace
  :ensure (:host github :repo "szermatt/visual-replace"))
#+end_src
** undo-fu
#+begin_src elisp :tangle "init.el"
(use-package undo-fu)

(use-package undo-fu-session
  :config (undo-fu-session-global-mode t))
#+end_src

** modeline
#+begin_src elisp :tangle "init.el"
(use-package doom-themes)
(use-package spacious-padding
  :config
  (setq spacious-padding-widths
        '( :internal-border-width 10
           :header-line-width 2
           :mode-line-width 1
           :tab-width 4
           :right-divider-width 30
           :scroll-bar-width 2))
  (spacious-padding-mode t))

(use-package keycast
  :config
  (setq keycast-mode-line-format "%2s%k%c%R ")
  (setq keycast-mode-line-remove-tail-elements nil)
  (setq keycast-mode-line-insert-after 'mode-line-end-spaces)
  (dolist (input '(self-insert-command org-self-insert-command))
    (add-to-list 'keycast-substitute-alist `(,input "." "Typing…")))

  (dolist (event '(mouse-event-p mouse-movement-p mwheel-scroll))
    (add-to-list 'keycast-substitute-alist `(,event nil)))
  (keycast-mode-line-mode t))
#+end_src

** nix
#+begin_src elisp :tangle "init.el"
(use-package nix-mode)
#+end_src

** direnv
#+begin_src elisp :tangle "init.el"
(use-package envrc
  :hook ((prog-mode) . envrc-global-mode))
#+end_src

** markdown
#+begin_src elisp :tangle "init.el"
(use-package markdown-mode
  :mode ("README\\.md\\'" . gfm-mode))
#+end_src

** treesitter
#+begin_src elisp :tangle "init.el"
(use-package treesit-auto
  :config
  (setq treesit-auto-install t)
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))
#+end_src

** git
#+begin_src elisp :tangle "init.el"
(use-package transient
  :defer t)
(use-package magit
  :defer t)

(use-package git-gutter
  :diminish (git-gutter-mode)
  :config (global-git-gutter-mode t)
  (custom-set-variables
   '(git-gutter:modified-sign "● ")
   '(git-gutter:added-sign "▶ ")
   '(git-gutter:deleted-sign "▼ ")))
#+end_src

** ui
#+begin_src elisp :tangle "init.el"
(use-package pulsar
  :config
  (pulsar-global-mode t))

(use-package goggles
  :config
  (setq goggles-pulse t)
  (goggles-mode t))

(use-package which-key
  :diminish (which-key-mode)
  :config
  (setq which-key-idle-delay 0.2
        which-key-idle-secondary-delay 0.02)
  (which-key-setup-minibuffer)
  (which-key-mode))
#+end_src

** help
#+begin_src elisp :tangle init.el
(use-package helpful
  :defer t)
#+end_src

** fontaine
#+begin_src elisp :tangle "init.el"
(when (display-graphic-p)
  (use-package fontaine
    :config
    (setq fontaine-set-preset 'regular
          fontaine-presets
          '((regular)
            (t
             :default-family "Zed Mono"
             :default-weight regular
             :default-height 160

             :fixed-pitch-family nil
             :fixed-pitch-weight nil
             :fixed-pitch-height 1.0

             :fixed-pitch-serif-family nil
             :fixed-pitch-serif-weight nil
             :fixed-pitch-serif-height 1.0

             :mode-line-active-family "Kollektif"
             :mode-line-active-weight nil
             :mode-line-active-height 170

             :mode-line-inactive-family "Kollektif"
             :mode-line-inactive-weight nil
             :mode-line-inactive-height 170

             :line-number-family nil
             :line-number-weight nil
             :line-number-height 0.9

             :bold-family nil
             :bold-weight bold

             :italic-family nil
             :italic-slant italic

             :line-spacing nil)))
    (fontaine-mode t)
    (fontaine-set-preset 'regular)))
#+end_src

** nw
#+begin_src elisp :tangle "init.el"
(use-package xclip
  :config
  (when (not (display-graphic-p))
    (xclip-mode 1)
    (add-to-list 'term-file-aliases '("foot" . "xterm"))
    (load-theme 'doom-sourcerer t)
    (set-face-attribute 'default nil :background "unspecified-bg")))
#+end_src

** server
#+begin_src elisp :tangle "init.el"
(use-package server
  :ensure nil
  :config
  (unless (server-running-p)
    (server-start)))
#+end_src

** dired
#+begin_src elisp :tangle "init.el"
(use-package dired
  :hook ((dired-mode . hl-line-mode))
  :ensure nil
  :bind (:map dired-mode-map
              ("l" . dired-find-file)
              ("h" . dired-up-directory))
  :config
  (require 'dired-x)
  (setq dired-listing-switches
        "-AGFhlv --time-style=locale"
        dired-mouse-drag-files t
        dired-bind-jump nil
        dired-kill-when-opening-new-dired-buffer t))

(use-package async
  :config
  (dired-async-mode t))
#+end_src

** emacs
#+begin_src elisp :tangle "init.el"
(use-package emacs
  :ensure nil
  :config
  (setq ring-bell-function #'ignore
        completion-cycle-threshold 3
        scroll-step 1
        scroll-margin 3
        find-file-visit-truename t
        scroll-conservatively 10000
        make-backup-files nil
        next-screen-context-lines 5
        tab-always-indent 'complete
        comment-multi-line nil
        recentf-max-saved-items 200
        vc-follow-symlinks t
        line-move-visual nil
        initial-scratch-message nil
        indicate-empty-lines t
        confirm-kill-emacs nil
        confirm-kill-processes nil
        show-trailing-whitespace t
        use-short-answers t
        initial-major-mode 'org-mode
        inhibit-startup-screen t
        display-time-format "%a %d %b %H:%M"
        display-time-default-load-average nil
        default-input-method "japanese"
        enable-recursive-minibuffers t
        completion-in-region-function #'consult-completion-in-region
        electric-pair-pairs
        '(
          (?\" . ?\")
          (?\{ . ?\})))

  (setq-default indent-tabs-mode nil
                tab-width 4)

  (setq tab-always-indent 'complete)

  (define-fringe-bitmap 'right-curly-arrow
    [#b1111111
     #b0000001
     #b0000001
     #b0000001
     #b0000001
     #b0000001])

  (define-fringe-bitmap 'left-curly-arrow
    [#b1000000
     #b1000000
     #b1000000
     #b1000000
     #b1000000
     #b1111111])

  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)

  (setq-default create-lockfiles nil
                make-backup-files nil
                version-control t
                vc-make-backup-files nil
                backup-by-copying t
                delete-old-versions t
                kept-old-versions 5
                kept-new-versions 5
                auto-save-file-name-transforms `((".*" ,(concat user-emacs-directory "auto-save-list/") t))
                backup-directory-alist (list (cons "." (concat user-emacs-directory "backup/"))))

  (setq whitespace-style '(face tabs trailing lines empty spaces indentation space-mark tab-mark))
  (add-hook 'before-save-hook #'whitespace-cleanup)

  (add-hook 'prog-mode-hook #'hl-line-mode)
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)

  (electric-pair-mode t)
  (recentf-mode t)
  (save-place-mode t)
  (display-time-mode t)
  (prettify-symbols-mode t)
  (global-auto-revert-mode t)
  (savehist-mode t)
  (window-divider-mode nil)
  (column-number-mode t)
  (size-indication-mode t)

  (defadvice split-window (after split-window-after activate)
    (other-window 1))

  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode))
#+end_src
