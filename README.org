#+TITLE: emacs cfg
#+AUTHOR: zen
#+EMAIL: 71zenith@proton.me

The following is my emacs config concentrated into two files =early-init.el= and =init.el=.

[[file:screenshot.png]]
-----

* early-init.el
#+begin_src  emacs-lisp :tangle "early-init.el"
(setq-default package-enable-at-startup nil
              use-dialog-box nil
              file-name-handler-alist nil
              inhibit-compacting-font-caches t
              warning-minimum-level :error
              use-package-always-ensure t)

(defun display-startup-echo-area-message ()
  (message ""))

(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 0.5)

(add-hook 'emacs-startup-hook
          (lambda ()
            (setq gc-cons-threshold (* 1024 1024 20)
                  gc-cons-percentage 0.2)))

(setq-default default-frame-alist
              '((tool-bar-lines . 0)
                (menu-bar-lines . 0)
                (undecorated . t)
                (vertical-scroll-bars . nil)
                (horizontal-scroll-bars . nil)))
#+end_src


* init.el
** elpaca
#+begin_src elisp :tangle "init.el"
(defvar elpaca-installer-version 0.6)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (call-process "git" nil buffer t "clone"
                                       (plist-get order :repo) repo)))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

(elpaca elpaca-use-package
  (elpaca-use-package-mode))

(elpaca-wait)
#+end_src

** completion
*** vertico
#+begin_src elisp :tangle "init.el"
(use-package vertico
  :bind (:map vertico-map
              ("C-h" . left-char)
              ("C-l" . right-char)
              ("C-j" . vertico-next)
              ("C-k" . vertico-previous))
  :config
  (setq vertico-resize nil
        vertico-cycle t)
  :init
  (vertico-mode t))
#+end_src

*** marginalia
#+begin_src elisp :tangle "init.el"
(use-package marginalia
  :config
  (setq marginalia-annotators
        '(marginalia-annotators-heavy marginalia-annotators-light nil))
  (marginalia-mode t))
#+end_src

*** corfu
#+begin_src elisp :tangle "init.el"
(use-package corfu
  :bind (:map corfu-map
              ("TAB"      . corfu-next)
              ([tab]      . corfu-next)
              ("S-TAB"    . corfu-previous)
              ([backtab]  . corfu-previous))
  :hook ((prog-mode   . corfu-mode)
         (shell-mode  . corfu-mode)
         (eshell-mode . corfu-mode))
  :config
  (setq corfu-cycle t
        corfu-auto t
        corfu-preview-current 'insert
        corfu-separator ?\s
        corfu-quit-at-boundary nil
        corfu-quit-no-match nil
        corfu-preselect 'prompt
        corfu-on-exact-match nil
        corfu-scroll-margin 5
        corfu-popupinfo-delay nil)
  (global-corfu-mode)
  (corfu-history-mode)
  (corfu-popupinfo-mode))
#+end_src

*** cape
#+begin_src elisp :tangle "init.el"
(use-package cape
  :config
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  (add-to-list 'completion-at-point-functions #'cape-elisp-block)
  (add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  (add-to-list 'completion-at-point-functions #'cape-emoji))
#+end_src

*** orderless
#+begin_src elisp :tangle "init.el"
(use-package orderless
  :config
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** act on everything
*** consult
#+begin_src elisp :tangle "init.el"
(use-package consult
  :config
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)
  :after vertico)
#+end_src

*** embark
#+begin_src elisp :tangle "init.el"
(use-package embark
  :config
  (defun embark-which-key-indicator ()
    "An embark indicator that displays keymaps using which-key.
The which-key help message will show the type and value of the
current target followed by an ellipsis if there are further
targets."
    (lambda (&optional keymap targets prefix)
      (if (null keymap)
          (which-key--hide-popup-ignore-command)
        (which-key--show-keymap
         (if (eq (plist-get (car targets) :type) 'embark-become)
             "Become"
           (format "Act on %s '%s'%s"
                   (plist-get (car targets) :type)
                   (embark--truncate-target (plist-get (car targets) :target))
                   (if (cdr targets) "â€¦" "")))
         (if prefix
             (pcase (lookup-key keymap prefix 'accept-default)
               ((and (pred keymapp) km) km)
               (_ (key-binding prefix 'accept-default)))
           keymap)
         nil nil t (lambda (binding)
                     (not (string-suffix-p "-argument" (cdr binding))))))))

  (setq embark-indicators
	'(embark-which-key-indicator
	  embark-highlight-indicator
	  embark-isearch-highlight-indicator))

  (defun embark-hide-which-key-indicator (fn &rest args)
    "Hide the which-key indicator immediately when using the completing-read prompter."
    (which-key--hide-popup-ignore-command)
    (let ((embark-indicators
           (remq #'embark-which-key-indicator embark-indicators)))
      (apply fn args)))

  (advice-add #'embark-completing-read-prompter
              :around #'embark-hide-which-key-indicator))
(use-package embark-consult
  :after (:all embark consult)
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** perspective
#+begin_src elisp :tangle "init.el"
(use-package perspective
  :config
  (setq persp-state-default-file "~/.emacs.d/perspective")
  (persp-mode t))
#+end_src


** evil
#+begin_Src elisp :tangle "init.el"
(use-package evil
  :init
  (setq evil-want-keybinding nil
        evil-want-C-u-scroll t
        evil-vsplit-window-right t
        evil-split-window-below t
        evil-undo-system 'undo-redo
        evil-want-integration t)
  (evil-mode t))

(use-package evil-collection
  :after evil
  :config (evil-collection-init))

(use-package evil-goggles
  :after evil
  :config
  (setq evil-goggles-duration 0.05)
  (evil-goggles-mode))

(use-package evil-commentary
  :after evil
  :config
  (evil-commentary-mode))
#+end_src

** dired
#+begin_src elisp :tangle "init.el"
(use-package dired
  :after evil-collection
  :ensure nil
  :hook (dired-mode . dired-hide-details-mode)
  :config
  (setq dired-listing-switches
        "-AGFhlv --group-directories-first --time-style=long-iso"))

(use-package nerd-icons-dired
  :hook
  (dired-mode . nerd-icons-dired-mode))

(use-package dired-single)

(use-package async
  :config
  (dired-async-mode t))
#+end_src

** general
#+begin_src elisp :tangle "init.el"
  (use-package general
    :config
    (defvar my-help-map
      (let ((map (make-sparse-keymap)))
	(define-key map (kbd "h") #'helpful-symbol)
	(define-key map (kbd "o") #'describe-symbol)
	(define-key map (kbd "k") #'describe-keymap)
	(define-key map (kbd "K") #'helpful-key)
	(define-key map (kbd "m") #'describe-mode)
	(define-key map (kbd "M") #'man)
	(define-key map (kbd "p") #'helpful-at-point)
	map))

    (defvar my-buffer-map
      (let ((map (make-sparse-keymap)))
	(define-key map (kbd "b") #'consult-buffer)
	(define-key map (kbd "k") #'kill-current-buffer)
	(define-key map (kbd "n") #'next-buffer)
	(define-key map (kbd "p") #'previous-buffer)
	(define-key map (kbd "s") #'scratch-buffer)
	map))

    (defvar my-persp-map
      (let ((map (make-sparse-keymap)))
	(define-key map (kbd "c") #'persp-kill)
	(define-key map (kbd "a") #'persp-add-buffer)
	(define-key map (kbd "A") #'persp-set-buffer)
	(define-key map (kbd "s") #'persp-switch)
	(define-key map (kbd "b") #'persp-switch-to-buffer*)
	(define-key map (kbd "k") #'persp-kill-buffer*)
	(define-key map (kbd "r") #'persp-rename)
	(define-key map (kbd "h") #'persp-prev)
	(define-key map (kbd "l") #'persp-next)
	map))

    (defvar my-window-map
      (let ((map (make-sparse-keymap)))
	(define-key map (kbd "s") #'split-window-below)
	(define-key map (kbd "v") #'split-window-right)
	(define-key map (kbd "c") #'delete-window)
	(define-key map (kbd "w") #'evil-window-next)
	map))

    (defvar my-lsp-map
      (let ((map (make-sparse-keymap)))
	(define-key map (kbd "r") #'xref-find-references)
	(define-key map (kbd "d") #'xref-find-definitions)
	(define-key map (kbd "D") #'eglot-find-declaration)
	(define-key map (kbd "f") #'eglot-format)
	(define-key map (kbd "R") #'eglot-rename)
	(define-key map (kbd "c") #'eglot-code-actions)
	(define-key map (kbd "l") #'consult-imenu)
	map))

    (general-define-key
     :states '(normal insert visual emacs)
     :prefix "SPC"
     :global-prefix "M-SPC"
     "a" `(tempel-complete :which-key "snippet")
     "b" `(,my-buffer-map :which-key "BUFFER")
     "c" '(org-capture :which-key "capture")
     "d" '(dired-jump :which-key "dired jump")
     "e" '(embark-act :which-key "embark")
     "E" '(eshell :which-key "eshell")
     "f" '(find-file :which-key "open file")
     "F" '(consult-find :which-key "find")
     "g" '(consult-ripgrep :which-key "grep")
     "h" `(,my-help-map :which-key "HELP")
     "i" '(insert-char :which-key "unicode")
     "j" '(consult-imenu :which-key "imenu")
     "k" '(evil-commentary :which-key "comment")
     "l" `(,my-persp-map :which-key "PERSP")
     "L" '(persp-state-load :which-key "persp load")
     "m" '(magit :which-key "magit")
     "n" '(format-all-region-or-buffer :which-key "format")
     "o" '(evil-indent-line :which-key "indent")
     "p" '(projectile-find-file :which-key "proj find")
     "P" '(projectile-switch-project :which-key "project")
     "Q" '(save-buffers-kill-emacs :which-key "quit")
     "r" '(consult-recent-file :which-key "recent")
     "s" '(save-buffer :which-key "save")
     "S" '(persp-state-save :which-key "persp save")
     "t" '(toggle-input-method :which-key "æ—¥æœ¬")
     "u" '(consult-theme :which-key "theme")
     "v" '(consult-yank-pop :which-key "clipboard")
     "V" '(eval-region :which-key "eval elisp")
     "w" `(,my-window-map :which-key "WINDOW")
     "x" '(consult-flymake :which-key "flymake")
     "z" `(,my-lsp-map :which-key "EGLOT")
     "SPC" '(execute-extended-command :which-key "M-x")
     ":" '(eval-expression :which-key "M-:")
     "/" '(consult-line :which-key "search")
     "<return>" '(consult-bookmark :which-key "jump bookmark")
     "s-<return>" '(bookmark-set :which-key "set bookmark")))
#+end_src

** org
#+begin_src elisp :tangle "init.el"
(use-package org-modern
  :config
  (setq org-startup-indented t
        org-edit-src-content-indentation 0
        org-src-preserve-indentation t
        org-confirm-babel-evaluate nil
        org-auto-align-tags nil
        org-tags-column 0
        org-catch-invisible-edits 'show-and-error
        org-special-ctrl-a/e t
        org-insert-heading-respect-content t
        org-hide-emphasis-markers t
        org-pretty-entities t
        org-ellipsis "â€¦")
  :hook ((org-mode . org-modern-mode)
         (org-mode . hl-line-mode)
         (org-mode . visual-line-mode)
         (org-mode . org-indent-mode)))
#+end_src

** dashboard
#+begin_src elisp :tangle "init.el"
(use-package dashboard
  :config
  (add-hook 'elpaca-after-init-hook #'dashboard-insert-startupify-lists)
  (add-hook 'elpaca-after-init-hook #'dashboard-initialize)
  (setq dashboard-center-content t
        dashboard-banner-logo-title "Present Day.. Present Time! HAHAHA!"
        dashboard-set-footer nil
        dashboard-startup-banner (concat user-emacs-directory "lain.png")
        dashboard-items '((recents  . 5)
                          (bookmarks . 5)
                          (projects . 5)))
  (dashboard-setup-startup-hook))
#+end_src

** eshell
#+begin_src elisp :tangle "init.el"
(setq eshell-prompt-function (lambda nil
                               (concat
                                (propertize (eshell/pwd) 'face `(:foreground "green"))
                                (propertize " Î»" 'face `(:foreground "cyan"))
                                (propertize " "))))
(setq eshell-highlight-prompt t)
#+end_src

** code
*** formatting
#+begin_src elisp :tangle "init.el"
(use-package format-all
  :hook (prog-mode . format-all-mode)
  :config
  (setq-default format-all-formatters
                '(("Nix" (nixfmt))
                  ("Shell" (shfmt "-i" "4" "-ci")))))
#+end_src

*** snippets
#+begin_src elisp :tangle "init.el"
(use-package tempel
  :init
  (defun tempel-setup-capf ()
    (setq-local completion-at-point-functions
                (cons #'tempel-expand
                      completion-at-point-functions)))
  (add-hook 'prog-mode-hook 'tempel-setup-capf)
  :bind (:map tempel-map
              ("C-h" . tempel-previous)
              ("C-l" . tempel-next)
              ("C-k" . tempel-done)
              ("C-j" . tempel-end)))

(use-package tempel-collection)
#+end_Src

*** eglot
#+begin_src elisp :tangle "init.el"
;; (use-package eglot
;;   :ensure nil
;;   :hook ((nix-mode . eglot-ensure)
;;          (go-mode . eglot-ensure))
;;          (sh-mode . eglot-ensure))
#+end_src

*** TODO tree sitter
#+begin_src elisp :tangle "init.el"
(use-package treesit-auto
  :config
  (setq treesit-auto-langs '(bash elisp)
        treesit-auto-install 'prompt)
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))

(use-package evil-textobj-tree-sitter)
  ;; :config
  ;; (define-key evil-outer-text-objects-map "f" (evil-textobj-tree-sitter-get-textobj "function.outer"))
  ;; (define-key evil-inner-text-objects-map "f" (evil-textobj-tree-sitter-get-textobj "function.inner"))
  ;; (define-key evil-outer-text-objects-map "a" (evil-textobj-tree-sitter-get-textobj ("conditional.outer" "loop.outer"))))
#+end_src


** quality of life
*** looks
#+begin_src elisp :tangle "init.el"
(use-package spacious-padding
  :config (spacious-padding-mode))

(use-package doom-modeline
  :config
  (setq doom-modeline-icon nil
        doom-modeline-unicode-fallback nil
        doom-modeline-height 33
        doom-modeline-hud nil
        doom-modeline-buffer-encoding nil)
  (doom-modeline-mode))

(use-package keycast
  :config
  (setq keycast-mode-line-format "%2s%k%c%R")
  (setq keycast-mode-line-insert-after 'mode-line-modes)
  (dolist (input '(self-insert-command org-self-insert-command))
    (add-to-list 'keycast-substitute-alist `(,input "." "Typingâ€¦")))

  (dolist (event '(mouse-event-p mouse-movement-p mwheel-scroll))
    (add-to-list 'keycast-substitute-alist `(,event nil)))
  (keycast-header-line-mode))
#+end_src

*** popper
#+begin_src elisp :tangle "init.el"
(use-package popper
  :config
  (setq popper-reference-buffers
        '("\\*Messages\\*"
          "\\*Warnings\\*"
          "\\*xref\\*"
          "\\*Backtrace\\*"
          "*Flymake diagnostics.*"
          "*helpful.*"
          "\\*eldoc\\*"
          "\\*compilation\\*"
          "^*tex"
          "Output\\*$"
          "\\*Async Shell Command\\*"
          "\\*Dtache Shell Command\\*"
          "\\*GDB.*out\\*"
          help-mode
          compilation-mode))
  (popper-mode t))

#+end_src

*** random
#+begin_src elisp :tangle "init.el"
(use-package pulsar
  :config
  (pulsar-global-mode t))

(use-package savehist
  :ensure nil
  :config (savehist-mode t))

(use-package eat
  :hook ((eshell-mode . eat-eshell-mode)
         (eshell-mode . eat-eshell-visual-command-mode)))

(use-package seq)

(use-package eldoc)

(use-package magit)

(use-package helpful)

(use-package nix-mode)

(use-package go-mode)

(use-package projectile
  :config (projectile-mode t))

(use-package which-key
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.5
        which-key-idle-secondary-delay 0.05)
  (which-key-mode))
#+end_Src


** emacs
#+begin_src elisp :tangle "init.el"
(use-package emacs
  :ensure nil
  :config
  (setq ring-bell-function #'ignore
        completion-cycle-threshold 3
        scroll-step 1
        scroll-margin 3
        scroll-conservatively 10000
        make-backup-files nil
        next-screen-context-lines 5
        tab-always-indent 'complete
        comment-multi-line nil
        line-move-visual nil
        initial-scratch-message nil
        indicate-empty-lines t
        confirm-kill-emacs nil
        show-trailing-whitespace t
        inhibit-startup-screen t
        display-time-format "%H:%M"
        display-time-default-load-average nil
        default-input-method "japanese"
        enable-recursive-minibuffers t
        tab-width 2
        evil-shift-width tab-width
        completion-in-region-function #'consult-completion-in-region
        electric-pair-pairs
        '(
          (?\" . ?\")
          (?\{ . ?\})))
  (fset 'yes-or-no-p 'y-or-n-p)
  (set-face-attribute 'default nil :height 160)
  (prettify-symbols-mode t)
  (global-auto-revert-mode t)
  (make-directory "~/.emacs.d/backup/" t)
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/backup/" t))
        backup-directory-alist '(("." . "~/.emacs.d/backup/"))
        create-lockfiles nil)
  (add-hook 'prog-mode-hook #'hl-line-mode)
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
  (electric-pair-mode t)
  (recentf-mode t)
  (window-divider-mode nil)
  (save-place-mode t)
  (indent-tabs-mode nil)
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  (defadvice split-window (after split-window-after activate)
    (other-window 1))

  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode))
#+end_src
